{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Pre-process avian data at the PKEY level\"\nauthor: \"Nicole Barker\"\ndate: \"Last run: Jan 22, 2017\"\noutput: \n  word_document:\n    reference_docx: ../styles/ReportFormat_1.docx\n---\n## Script Abstract\n\nOne of a series of scripts that quality-checks, corrects,  pre-processes, and merges the various tables from BAM's Avian Database. Removes duplicates. Performs some initial tests of patterns in avian data by survey method to help decide how to harmonize the data. \n\nThis script deals with SS (site)-level data, and adds in site-level covariates.\n\n## Background\nOn Nov 30, 2017, Trish provided me with the Access Database of BAM's avian data: COFI_BC_NOV30_2017.accdb. I exported the 3 tables based on BAM's standard data format.\n\n**FILES**\n\n1. **BC_COFI_XY.csv**\n2. **BC_COFI_PKEY.txt**\n3. **BC_COFI_POINTCOUNT.txt**\n\nThis script does the following\n\n* Look for and eliminate duplications\n* Correct any errors noticed during pre-processing\n* Save a pre-processed table of SS-level data for further processing/use\n\n\n``` {r setup, echo=F, message=F, warning=F}\nrequire(knitr)\nopts_knit$set(root.dir = '..')\n```\n\n``` {r load.project, message=F}\nrequire(ProjectTemplate)\nload.project()\noptions(digits=12)\n```\n\n### 2. Sampling Occasions: *BC_COFI_PKEY.txt*\n\nThe BAM Database is hierarchical, with primary keys for each table compounding upon each other in the various tables. \nIt's useful to look at a map to understand how the column names correspond to point count survey protocols/sampling design.  Kathy Martin's data represents a good example. \n\n* _PCODE_: unique code for each project\n* _SITE_: Typically a cluster of point count stations\n* _STN_: individual point count survey location\n* _SS_: compound key comprised of PCODE:SITE:STN\n* _ROUND_: If multiple visits to the same location, typically on different days.\n* _PKEY_: compound key -->  PCODE:SITE:STN:YY:ROUND\n* _METHOD_: The survey method (survey distance, duration); usually but not always consistent within a PCODE.\n* _obs_: Identity of the survey observer.\n\n![ ^^^ Image. BBS, Atlas (BCCA), and KMART (Kathy Martin)'s data, as an example of PCODE, SITE, and STN. Different coloured dots are from different projects (PCODEs). Kathy Martin's data (KMART) has clusters of stations in different sites (SITE), which are labelled KNIFEAFF, KNIFE7M, etc. Within (SITE) clusters are individual stations (STN). The combination of PCODE:SITE:STN makes up SS, which is a  unique ID corresponding to a given location indicated by xy coordinates](../output/KathyMartinSITEdemo.jpg)\n\n``` {r load.pkey}\npkey <- read.csv(\"data/BC_COFI_PKEY.txt\")\nkable(rbind(head(pkey), tail(pkey)), row.names=F)\nunique(pkey$METHOD)\n```\n\n**Checking for Missing Data**\n\n``` {r}\npkey$mm.dd.yyy <- as.character(pkey$mm.dd.yyy)\npkey$mm.dd.yyy[pkey$mm.dd.yyy == \"\"] <- \"NA\" # change blank values to NAs\n\npkey$MM <- as.character(pkey$MM)\npkey$MM[pkey$MM == \"\"] <- \"NA\" # change blank values to NAs\n\npkey$HR <- as.character(pkey$HR)\npkey$HR[pkey$HR == \"\"] <- \"NA\" # change blank values to NAs\n\npkey$MIN <- as.character(pkey$MIN)\npkey$MIN[pkey$MIN == \"\"] <- \"NA\" # change blank values to NAs\n\npkey$StartTime <- as.character(pkey$StartTime)\npkey$StartTime[pkey$StartTime == \"\"] <- \"NA\" # change blank values to NAs\n\nkable(as.data.frame(do.call(rbind,lapply(pkey, function(x) {sum(is.na(x))}))), caption=\"Number of missing values per column\")\nkable(as.data.frame(do.call(rbind,lapply(pkey, function(x) {length(unique(x))}))), caption=\"Number unique values per column\")\nnrow(pkey)\nlength(unique(pkey$PKEY))\n```\n\n**NOTES**\n\n* \n\n##### Fix Times\n\n``` {r}\npkey$StartTime[pkey$StartTime == \"\"] <- NA #if start time is blank, make \"NA\"\n\npkey$Missing_StartTime <- NA\npkey$Missing_StartTime[!is.na(pkey$StartTime)] <- \"NOT missing Sampling Date\"\n\npkey$Missing_HR_MIN <- NA\npkey$Missing_HR_MIN[!(is.na(pkey$HR) & is.na(pkey$MIN))] <- \"NOT missing Start Time\"\n\npkey$Missing_SamplingDate <- NA\npkey$Missing_SamplingDate[!(is.na(pkey$MM) | is.na(pkey$DD))] <- \"NOT missing Sampling Date\"\n```\n\n**Some Checks**\n\n``` {r}\nunique(pkey[pkey$Missing_SamplingDate == \"NOT missing Sampling Date\",]$DD)\nunique(pkey[pkey$Missing_SamplingDate == \"NOT missing Sampling Date\",]$MM)\n```\n\n**ERROR NOTICED** - I'm pretty sure no surveys were done in Nov and Dec, so this probably indicates a switch in MM and DD for some sites. Time to track down which ones \n\n``` {r}\npkey$MM.old <- pkey$MM\npkey$DD.old <- pkey$DD\npkey <- pkey[order(pkey$YYYY, pkey$SS),]\n\nkable(rbind(head(pkey[pkey$PCODE %in% \"GMSMON15\", c(\"PCODE\", \"SS\", \"YYYY\", \"MM\", \"DD\", \"MM.old\")], 10), tail(pkey[pkey$PCODE %in% \"GMSMON15\", c(\"PCODE\", \"SS\", \"YYYY\", \"MM\", \"DD\", \"MM.old\")], 10)), row.names=F)\n\npkey$DD[pkey$PCODE %in% \"GMSMON15\" & pkey$YYYY == \"2012\"] <- pkey$MM.old[pkey$PCODE %in% \"GMSMON15\" & pkey$YYYY == \"2012\"] \n\npkey$MM[pkey$PCODE %in% \"GMSMON15\" & pkey$YYYY == \"2012\"] <-\n  pkey$DD.old[pkey$PCODE %in% \"GMSMON15\" & pkey$YYYY == \"2012\"]\n\nkable(rbind(head(pkey[pkey$PCODE %in% \"GMSMON15\" & pkey$YYYY == \"2012\",c(\"PCODE\", \"SS\", \"YYYY\", \"MM\", \"DD\")]),\n            tail(pkey[pkey$PCODE %in% \"GMSMON15\" & pkey$YYYY == \"2012\",c(\"PCODE\", \"SS\", \"YYYY\", \"MM\", \"DD\")])), row.names=F)\nunique(pkey$MM)\n```\n\nAlright, so that fixed the obvious date issues. Let's look at some other potential data problems. \n\n``` {r}\npkey$DATE <- as.Date(paste(pkey$YYYY, pkey$MM, pkey$DD, sep=\"/\"))\n```\n\n**Notes**\n\n* The pkey table has `r nrow(pkey)` rows covering `r length(unique(pkey$SS))` SS from `r length(unique(pkey$SITE))` sites over `r length(unique(pkey$PCODE))` projects. This corresponds to `r length(unique(pkey$PKEY))` unique PKEYS\n* The earliest point count was done in `r min(pkey$YYYY)`.\n* Sometimes the addition of WSI data added projects we already had from the Atlas. So we need to look for duplicated locations and years to remove those duplicates.\n\n#### Get method details (MaxDur, MaxDist, etc) from proj summary table and method code tables\n\n\n1. **National_Proj_Summary_V4_2015.csv**\n\n```{r, load.proj.summary}\nprojs <- read.csv(\"data/National_Proj_Summary_V4_2015.csv\", header=T)\ncolnames(projs)[which(colnames(projs) == \"Method\")] <- \"METHOD\" #change colname\nprojs$Maxdist <- toupper(projs$Maxdist)\n\nkable(head(projs[c(\"PCODE\", \"METHOD\", \"DURMETH\", \"DISTMETH\", \"ChangeMethod\", \"MaxDuration\", \"Maxdist\")]), row.names=F)\n```\n\n**Checking for Missing Data**\n\n``` {r}\nkable(as.data.frame(do.call(rbind,lapply(projs, function(x) {length(unique(x))}))), caption=\"Number unique values per column\")\n\nkable(as.data.frame(do.call(rbind,lapply(projs, function(x) {sum(is.na(x))}))), caption=\"Number of missing values per column\")\n\nnrow(projs)\nlength(unique(projs$METHOD))\nlength(unique(projs$PCODE))\nrm(projs)\n```\n\n**ERROR NOTICED** - Some of the new projects don't have max dist and max duration in their tables\n\n* Correction: I referred back to the Access database to update the project summary table accordingly\n* Now reload the project summary with manual correction\n\n``` {r}\nprojs <- read.csv(\"data/qry_ProjMethodSummary-manuallyCorrected.csv\", header=T)\n\ncolnames(projs)[which(colnames(projs) == \"Method\")] <- \"METHOD\" #change colname\nprojs.qs <- projs #quicksave\nprojs$Maxdist <- toupper(projs$Maxdist)\n\nkable(head(projs[c(\"PCODE\", \"METHOD\", \"DURMETH\", \"DISTMETH\", \"MaxDuration\", \"Maxdist\")]), row.names=F)\n```\n\n**Checking for Missing Data**\n\n``` {r}\nkable(as.data.frame(do.call(rbind,lapply(projs, function(x) {length(unique(x))}))), caption=\"Number unique values per column\")\n\nkable(as.data.frame(do.call(rbind,lapply(projs, function(x) {sum(is.na(x))}))), caption=\"Number of missing values per column\")\n\nnrow(projs)\nlength(unique(projs$METHOD))\nlength(unique(projs$PCODE))\n```\n\n``` {r}\npkey.method <- merge(pkey[c(\"PKEY\", \"SS\", \"PCODE\", \"SITE\", \"STN\", \"ROUND\", \"YYYY\", \"MM\", \"DD\", \"HR\", \"MIN\",\"METHOD\", \"obs\", colnames(pkey)[grep(\"Missing\", colnames(pkey))])], \n                     projs[c(\"METHOD\", \"DURMETH\", \"DURATIONRANGE\", \"MaxDuration\", \"DISTMETH\", \"DISTANCERANGE\", \"Maxdist\")], by=\"METHOD\", all.x=T) # keep all METHODs in the PKEY table, but discard any that are just in the methods table. \n\nkable(as.data.frame(do.call(rbind,lapply(pkey.method, function(x) {sum(is.na(x))}))), caption=\"Number of missing values per column\")\n\npkey.method$Missing_Method <- NA\npkey.method$Missing_Method[!is.na(pkey$METHOD)] <- \"NOT missing Method\"\n\n```\n\n#### Cache, clean, and reload\n\n``` {r}\ncache(\"pkey.method\")\nrm(list=ls());gc()\n```\n\n``` {r}\nload(\"cache/xy.ss.covar.RData\")\nnrow(xy.ss.covar)\nlength(unique(xy.ss.covar$SS))\ncolnames(xy.ss.covar)\n\n\nload(\"cache/pkey.method.RData\")\nnrow(pkey.method)\nlength(unique(pkey.method$SS))\nlength(unique(pkey.method$PKEY))\ncolnames(pkey.method)\n```\n\n\n### Combine xy.ss.covar and pkey.method tables\n\n``` {r}\nxy.ss.covar.pkey.method <- merge(xy.ss.covar, pkey.method, by=\"SS\", all=T)\ncolnames(xy.ss.covar.pkey.method)\n```\n\n**Check for missing data**\n\n``` {r}\nkable(as.data.frame(do.call(rbind,lapply(xy.ss.covar.pkey.method, function(x) {sum(is.na(x))}))), caption=\"Number of missing values per column\")\n```\n\n``` {r}\nxy.ss.covar.pkey.method$Missing_PKEY <- NA\nxy.ss.covar.pkey.method$Missing_PKEY[!(is.na(xy.ss.covar.pkey.method$PKEY))] <- \"NOT missing PKEY\"\n\nxy.ss.covar.pkey.method$PCODE_derived <- unlist(lapply(strsplit(as.character(xy.ss.covar.pkey.method$SS), \":\"), function(x) {x[1]}))\n\n```\n\n### Create reduced set, cache, clean, and reload\n\n``` {r}\ncache(\"xy.ss.covar.pkey.method\")\nwrite.table(xy.ss.covar.pkey.method, file=\"data/xy.ss.covar.pkey.method_all.csv\", sep=\",\", col.names=T, row.names=F)\n\ndo.call(rbind, lapply(xy.ss.covar.pkey.method, function(x) {sum(is.na(x))}))\n\n# remove any missing METHOD info (b/c precludes offset calculation)\nxy.ss.covar.pkey.method_nomissing <- subset(xy.ss.covar.pkey.method, subset=xy.ss.covar.pkey.method$Missing_Method %in% \"NOT missing Method\")\ndo.call(rbind, lapply(xy.ss.covar.pkey.method_nomissing, function(x) {sum(is.na(x))}))\n\nxy.ss.covar.pkey.method_nomissing <- subset(xy.ss.covar.pkey.method_nomissing, subset=xy.ss.covar.pkey.method_nomissing$Missing_Covar %in% \"NOT missing Covariates\")\ndo.call(rbind, lapply(xy.ss.covar.pkey.method_nomissing, function(x) {sum(is.na(x))}))\n\nxy.ss.covar.pkey.method_nomissing <- subset(xy.ss.covar.pkey.method_nomissing, subset=xy.ss.covar.pkey.method_nomissing$Missing_HR_MIN %in% \"NOT missing Start Time\")\ndo.call(rbind, lapply(xy.ss.covar.pkey.method_nomissing, function(x) {sum(is.na(x))}))\n\nxy.ss.covar.pkey.method_nomissing <- xy.ss.covar.pkey.method_nomissing[-which(colnames(xy.ss.covar.pkey.method_nomissing) %in% c(\"Missing_StartTime\"))]\n```\n\n``` {r}\ncache(\"xy.ss.covar.pkey.method_nomissing\")\nrm(list=ls()); gc()\nload(\"cache/xy.ss.covar.pkey.method_nomissing.RData\")\n```\n\n**NOTES**\n\n* Many SS have no PKEY, PCODE, and other information. Exact number is in table above. \n\n## Next Step. Look for duplicates\n\n### Looking for Duplicates 1: initial exploration of duplicates by Location and Date\n\n``` {r, create.locYr}\nxy.ss.covar.pkey.method_nomissing$LocYr <- paste(xy.ss.covar.pkey.method_nomissing$X_coor, xy.ss.covar.pkey.method_nomissing$Y_coor, xy.ss.covar.pkey.method_nomissing$YYYY)\nkable(head(xy.ss.covar.pkey.method_nomissing[c(\"PCODE\", \"LocYr\", \"YYYY\", \"HR\", \"MIN\")]), row.names=F)\n```\n\n`r length(unique(xy.ss.covar.pkey.method_nomissing$LocYr))` unique location & year combinations but in a data.farme of `r nrow(xy.ss.covar.pkey.method_nomissing)` rows. Indicating `r nrow(xy.ss.covar.pkey.method_nomissing) -length(unique(xy.ss.covar.pkey.method_nomissing$LocYr))` duplicated combinations of location and year.\n\nLet's look at some of these duplicates in more detail. \n\n``` {r loc.yr.duplicates, eval=T}\nloc.yr.dups <- xy.ss.covar.pkey.method_nomissing$LocYr[duplicated(xy.ss.covar.pkey.method_nomissing$LocYr)] # which combos are duplicated?\nxy.ss.covar.pkey.method.dups <- xy.ss.covar.pkey.method_nomissing[xy.ss.covar.pkey.method_nomissing$LocYr %in% loc.yr.dups,] #subset for duplicated combos\nxy.ss.covar.pkey.method.dups <- xy.ss.covar.pkey.method.dups[order(xy.ss.covar.pkey.method.dups$LocYr),] #change order\nwrite.table(xy.ss.covar.pkey.method.dups, file=\"output/duplicates.xyYear.csv\", sep=\",\", col.names=T, row.names=F) #archive to computer\nkable(xy.ss.covar.pkey.method.dups[1:20,c(\"LocYr\", \"STN\", \"HR\", \"MIN\", \"obs\")], row.names=F) #preview\n```\n\nThoughts on the above table: \n\n* Some \"duplicate\" surveys start at different times and correspond to different STNs. This suggests that they are different stations, even though they have \"identical\" xy coordinates. Perhaps the precision on the XY coordinates isn't sufficient to distinguish separate points. \n\n![ ^^^ Image. Example for SS BCCA:11PQ75:310765 and BCCA:11PQ75:310765, where bird data are different, confirming two different surveys... though possibly unindicated rounds](../output/ExampleDataDuplication2.jpg)\n\n* Subsequent examination of a specific known duplicate set (Atlas BCCA and QDFA) confirms that coordinates for some datasets have been rounded to fewer decimal places than were originally included. This would have the opposite effect of appearing to be NOT duplicated when in reality they are.\n    * Short-term ACTION: Round XY coordinates to 6 digits so that I detect duplication between less and more precise datasets.\n    * Longer-term ACTION: Ask Trish if Atlas has more precise coordinates stashed somewhere.\n\n![ ^^^ Image. Example for of the exact same stations being included from two different sources (BCCA and QDFA). Survey information is identical other than XY. BCCA has lower precision on XY coordinates than does QDFA.](../output/ExampleDataDuplication3.jpg)\n\n* In conclusion, the current LocYr combination is not a sufficient indicator for identifying duplicates\n    * Short-term ACTION: Include date, start time, and observer in my calculation of duplicates\n    * Longer-term ACTION: Trish can inspect apparent duplicates and delete real duplications. \n\n##### Removing Duplicates 2: Adding Time and Observer into the calculation\n\n``` {r Loc.Date.Time.Duplicates, eval=T}\nxy.ss.covar.pkey.method_nomissing$LocDateTime <- paste(round(xy.ss.covar.pkey.method_nomissing$X_coor, 6), round(xy.ss.covar.pkey.method_nomissing$Y_coor,6), xy.ss.covar.pkey.method_nomissing$DATE, xy.ss.covar.pkey.method_nomissing$HR, xy.ss.covar.pkey.method_nomissing$MIN)\n\nxy.ss.covar.pkey.method_nomissing$LocDateTimeObs <- paste(round(xy.ss.covar.pkey.method_nomissing$X_coor, 6), round(xy.ss.covar.pkey.method_nomissing$Y_coor,6), xy.ss.covar.pkey.method_nomissing$DATE, xy.ss.covar.pkey.method_nomissing$HR, xy.ss.covar.pkey.method_nomissing$MIN, xy.ss.covar.pkey.method_nomissing$obs)\n\nxy.ss.covar.pkey.method_nomissing <- xy.ss.covar.pkey.method_nomissing[order(xy.ss.covar.pkey.method_nomissing$LocDateTimeObs),]\n```\n\n**Notes** \n\n* `r length(unique(xy.ss.covar.pkey.method_nomissing$LocDateTime))` unique location, date, and time combinations but in a data.farme of `r nrow(xy.ss.covar.pkey.method_nomissing)` rows. Indicating many fewer, but still `r nrow(xy.ss.covar.pkey.method_nomissing)- length(unique(xy.ss.covar.pkey.method_nomissing$LocDateTime))`, duplicates. \n* But... there's a difference between those containing StartTime and those containing StartTime AND observer: `r length(unique(xy.ss.covar.pkey.method_nomissing$LocDateTimeObs))` unique combinations of location, date, time, and observer, `r length(unique(xy.ss.covar.pkey.method_nomissing$LocDateTimeObs))- length(unique(xy.ss.covar.pkey.method_nomissing$LocDateTime))` more than just combining location, date, and time.\n    * ACTION: Before I delete them, I should check if they're genuine double-observer surveys.\n\n##### Removing Duplicates 3: Looking for double-observer surveys\n\nLook for duplicated combinations of locdatetime that are NOT in the locdatetimeobs table\n\n``` {r look.for.double.observers, eval=T}\nlocdatetimedups <- xy.ss.covar.pkey.method_nomissing$LocDateTime[duplicated(xy.ss.covar.pkey.method_nomissing$LocDateTime)] #duplicated combos\nlocdatetimeobsdups <- xy.ss.covar.pkey.method_nomissing$LocDateTimeObs[duplicated(xy.ss.covar.pkey.method_nomissing$LocDateTimeObs)] # duplicated combos\nxy.ss.covar.pkey.method_nomissing.locdatetimedups <- xy.ss.covar.pkey.method_nomissing[xy.ss.covar.pkey.method_nomissing$LocDateTime %in% locdatetimedups,] #df of duplicated combos\nxy.ss.covar.pkey.method_nomissing.locdatetimeobsdups <- xy.ss.covar.pkey.method_nomissing[xy.ss.covar.pkey.method_nomissing$LocDateTimeObs %in% locdatetimeobsdups,] #df of duplicated combos\n\npossible.double.observers <- xy.ss.covar.pkey.method_nomissing.locdatetimedups[!xy.ss.covar.pkey.method_nomissing.locdatetimedups$LocDateTime %in% xy.ss.covar.pkey.method_nomissing.locdatetimeobsdups$LocDateTime, c(\"PCODE\", \"STN\", \"ROUND\", \"YYYY\", \"MM\", \"DD\", \"HR\", \"MIN\", \"obs\", \"LocDateTimeObs\")] #subset of combos where observer is only difference between apparently duplicated sites\npossible.double.observers <- possible.double.observers[order(possible.double.observers$PCODE, possible.double.observers$YYYY, possible.double.observers$HR),] #change order\nwrite.table(possible.double.observers, file=\"output/duplicates.possibledoubleobservers.csv\", sep=\",\", col.names=T, row.names=F) #archive on computer\nkable(possible.double.observers[c(1:10, 20:25, 200:210, 230), c(\"PCODE\", \"STN\", \"ROUND\", \"YYYY\", \"MM\", \"DD\", \"HR\", \"MIN\", \"obs\")]) #preview\n```\n\n**Notes**\n\nIt's a small set, so I inspected them all manually in Excel and in Access. I came to the following conclusions: \n\n* Only one survey appears to be true double-observer surveys: KMART:RISKESD has observers LMT and KD, who observed similar but not identical bird lists. ACTION: Keep these ones. \n  \n* Some appear to be duplicated datasets... giving the impression of two different observers because they're numbers in BCCA but names in the original project. e.g., \n    * BCCA10FG08 and BL2TFL48 in 2008. Atlas observer 970 is probably Kelly Squire. \n    * BCCA and QDFA in 2008 and 2009. \n        * Atlas observer 82 = Chris Chutter; \n        * Observer 1263 = Christine Rothenbach; \n        * Observer 467 = James Bradley; \n        * Observer 1367 = Kate England. \n    * ACTION: Delete the ATLAS versions of these but keep the project specific ones. \n\n* And still others are inexplicably weird. Pairs of apparently different observers conducting a survey at the same location and time, but with very different species lists. \n    * BCCA:10DU79 and BCCA:10DU89 appear to have two observers: one unidentified and one 99 or 100. Inspecting the Access Database suggests that this is NOT double-observer (see below screencap). I wonder if somehow the same observer collected all the data at this station, but didn't fill in all the rows with the observer ID. This led to splitting the survey into two parts? ACTION: DELETE these sites\n\n![ ^^^ Image. Example BCCA:10DU79 and BCCA:10DU89 on Jun 5, 2009 and Jun 17, 2009](../output/ExampleDataDuplication4.jpg)\n\n  * BCCA:10FE54 has observers 120 and 965. Similar situation as above where observer  120 has a much bigger species list than does observer 965. ACTION: Delete observer 965 but keep 120. \n\n![ ^^^ Image. Example BCCA:10FE54](../output/ExampleDataDuplication5.jpg)\n\n**ACTIONS**\n\n* I created an Excel file summarizing the verdict on this specific subset of duplicates: ** duplicates.possibledoubleobservers-deleteVerdict.csv.** Use this to remove undesired sites/surveys. \n\n``` {r remove.unwanted.set1, eval=T}\nremoveverdict <- read.csv(\"output/duplicates.possibledoubleobservers-deleteVerdict.csv\", header=T)\nLocDateTimeObs.todelete <- unique(removeverdict$LocDateTimeObs) #which combos to delete\nxy.ss.covar.pkey.method_nomissing.qs <- xy.ss.covar.pkey.method_nomissing #create quick.save version of df.\nxy.ss.covar.pkey.method_nomissing <- xy.ss.covar.pkey.method_nomissing[!xy.ss.covar.pkey.method_nomissing$LocDateTimeObs %in% LocDateTimeObs.todelete,] #subsetting for not the bad combos\n```\n\n##### Removing Duplicates 4: Returning to regular duplicates (LocationDateTimeObserver)\n\nNow that I've taken care of surveys that _appeared_ to be double-observer (b/c different observers for all other identical survey info), I can focus on examining the duplicates for Location, Date, Time, and Observer. \n\n``` {r}\nwrite.table(xy.ss.covar.pkey.method_nomissing.locdatetimeobsdups, file=\"output/duplicates.LocYearTimeObs.csv\", sep=\",\", col.names=T, row.names=F) #archive to computer\nxy.ss.covar.pkey.method_nomissing.locdatetimeobsdups <- xy.ss.covar.pkey.method_nomissing.locdatetimeobsdups[order(xy.ss.covar.pkey.method_nomissing.locdatetimeobsdups$PCODE, xy.ss.covar.pkey.method_nomissing.locdatetimeobsdups$YYYY, xy.ss.covar.pkey.method_nomissing.locdatetimeobsdups$MM, xy.ss.covar.pkey.method_nomissing.locdatetimeobsdups$DD),]\n\nkable(rbind(head(xy.ss.covar.pkey.method_nomissing.locdatetimeobsdups[c(\"PCODE\", \"STN\", \"ROUND\", \"YYYY\", \"MM\", \"DD\", \"HR\", \"MIN\", \"obs\")], 10), tail(xy.ss.covar.pkey.method_nomissing.locdatetimeobsdups[c(\"PCODE\", \"STN\", \"ROUND\", \"YYYY\", \"MM\", \"DD\", \"HR\", \"MIN\", \"obs\")], 10)))\nkable(xy.ss.covar.pkey.method_nomissing.locdatetimeobsdups[c(1:25, (nrow(xy.ss.covar.pkey.method_nomissing.locdatetimeobsdups)-25):nrow(xy.ss.covar.pkey.method_nomissing.locdatetimeobsdups)), c(\"PCODE\", \"STN\", \"ROUND\", \"YYYY\", \"MM\", \"DD\", \"HR\", \"MIN\", \"obs\")], row.names=F, caption=\"First 25 rows and Last 25 rows\")\n```\n\n**Notes**\n\nInvestigating on a case by case basis. \n\n* SRDR.M68_3: There's a STN 8 and a STN 9 at the exact same coordinates, surveyed at the exact same time. But with different species lists. ACTION: Keep both for now. \n* KMART:KNIFEKN: B2: looks like it might be a typo extra space in the SS/STN. Results in different bird data, but I think maybe it's supposed to be for the same site.       \n    * ACTION: I changed the SS and STN name in the hopes that it would fix the problem, but it probably won't. I may need to remove this STN from the dataset. \n* BCCA: In some of the pairs I checked, the surveys are at the same location, started at the same time, and done by the same observer. They have similar but not identical bird list.\n\n![ ^^^ Image. Example BCCA:08MM11 at 6:37 am by observer 117. Entry 1 has FOSP while Entry 2 doesn't; Entry 2 has SAVS and WCSP while Entry 1 doesn't](../output/ExampleDataDuplication6.jpg)\n\n* But in other pairs, everything is identical (location, date, time, observer, AND bird list). I suggest there are errors somewhere, but I can't figure out where.\n\n![ ^^^ Image. Example for SS BCCA:11NS17:333027 and BCCA:11NS17:333029, suggesting complete duplication of data](../output/ExampleDataDuplication1.jpg)\n\n![ ^^^ Image. Example for BCCA:10CE80, suggesting complete duplication of data](../output/ExampleDataDuplication7.jpg)\n\n* Short-term ACTION: Delete these from the dataset in the interest of saving time. \n* Long-term ACTION: Take this list to Trish for more exploration. \n\n\n``` {r delete.latest.duplicates, eval=T}\nxy.ss.covar.pkey.method_nomissing.qs <- xy.ss.covar.pkey.method_nomissing #quicksave\nxy.ss.covar.pkey.method_nomissing <- xy.ss.covar.pkey.method_nomissing[!xy.ss.covar.pkey.method_nomissing$LocDateTimeObs %in% xy.ss.covar.pkey.method_nomissing.locdatetimeobsdups$LocDateTimeObs,]\n```\n\nAfter that, I hope there aren't any duplicates left based on sampling location (SS) and sampling instance (PKEY) \n\n# However, I probably need to do some more quality-checking after keeping more stations than I did the first time around. There are some PCODES here I don't recognize from the first time. \n\n\n## 3. Point Count Data (i.e., bird observations): *BC_COFI_POINTCOUNT.txt* \n\n**FILES**\n\n1. **BC_COFI_POINTCOUNT.csv**\n\n``` {r load.pcdat, eval=T}\n#load point count data\npcdat1 <- read.csv(\"data/BC_COFI_POINTCOUNT.txt\")\ncolnames(pcdat1)[which(colnames(pcdat1)==\"SumOfABUND\")] <- \"ABUND\"\npcdat1 <- pcdat1[c(\"PKEY\", \"DURATION\", \"DISTANCE\", \"SPECIES\", \"BEH\", \"ABUND\")]\n\n# load species codes/names\n#codes <- read.csv(\"data/EC_AVIAN_CORE_20131015.csv\") # OLDER species list\ncodes <- read.csv(\"data/EC_AVIAN_CORE_20150324.csv\")\ncolnames(codes)[which(colnames(codes)==\"Species_ID\")] <- \"SPECIES\"\n\n#merge species names into point count dataset\npcdat2 <- merge(pcdat1, codes, by=\"SPECIES\", all.x=T)\n\n#subset for necessary columns\npcdat <- pcdat2[c(colnames(pcdat1), \"English_Name\")]\npcdat <- pcdat[order(pcdat$PKEY),]\n\nkable(rbind(head(pcdat), tail(pcdat)), row.names=F, caption=\"First 6 and last 6 rows\")\n```\n\n##### Looking for duplicated bird observations\n\n\n``` {r melt.pc.dat, eval=T}\npcdat_melt <- melt(pcdat[c(\"PKEY\", \"SPECIES\", \"DURATION\", \"DISTANCE\", \"ABUND\", \"BEH\")], measure.vars=\"ABUND\") # bring dataset into molten form\n```\n\nLet's look for duplicates here... Combine PKEY, Species, Duration, Distance, and Behaviour to create a unique ID.\n \n``` {r look.for.duplicates}\npcdat_melt$PkeySpDurDisBeh <- paste(pcdat_melt$PKEY, pcdat_melt$SPECIES, pcdat_melt$DURATION, pcdat_melt$DISTANCE, pcdat_melt$BEH, sep=\".\")\n```\n\n`r length(unique(pcdat_melt$PkeySpDurDisBeh))` unique combinations of PKEY, SPECIES, DURATION, DISTANCE, AND BEHAVIOUR but `r nrow(pcdat_melt)` rows. suggesting `r nrow(pcdat_melt) - length(unique(pcdat_melt$PkeySpDurDisBeh))` duplicates\n\nNO DUPLICATES. \n\n``` {r finding.UNGU.related.duplicates, eval=F}\ndupcombos <- unique(pcdat_melt[duplicated(pcdat_melt$PkeySpDurDisBeh),]$PkeySpDurDisBeh)\nkable(data.frame(PkeySpDurDistBeh=dupcombos))\npcdat_melt_tmp <- pcdat_melt[pcdat_melt$PkeySpDurDisBeh %in% dupcombos,]\nkable(pcdat_melt_tmp, row.names=F)\nkable(head(pcdat[pcdat$SPECIES %in% \"UNGU\",]), row.names=F)\ncodes[duplicated(codes$SPECIES),] #finding that duplicated species code...\n# All of these duplicates involve the same Species code (UNGU) -- the duplicates are from when I merged in the English names!! So I went back and updated my species code list to the 2015 version and now there's no duplicates. \n```\n\n#### Combine PC dat with xy.ss.covar.pkey.method_nomissing and write to a file for future use\n\n##### First, check which PKEY have no bird data, and which bird data have no associated spatial data\n\n``` {r}\ndatformerging <- xy.ss.covar.pkey.method_nomissing[-which(colnames(xy.ss.covar.pkey.method_nomissing) %in% c(\"FID_tz_wor\", \"Missing_Coordinates\", \"Missing_Covar\", \"Missing_HR_MIN\", \"Missing_SamplingDate\", \"Missing_Method\", \"Missing_PKEY\", \"PCODE_derived\", \"LocYr\", \"LocDateTime\", \"LocDateTimeObs\"))]\n```\n\n``` {r}\nxy.ss.covar.pkey.method_nomissing.pc1 <- merge(datformerging, pcdat, by=\"PKEY\", all.x =T) # merge with all pkey in the xy or pkey table, regardless of presence of bird data\n\nkable(rbind(head(xy.ss.covar.pkey.method_nomissing.pc1[is.na(xy.ss.covar.pkey.method_nomissing.pc1$ABUND),]),\n            tail(xy.ss.covar.pkey.method_nomissing.pc1[is.na(xy.ss.covar.pkey.method_nomissing.pc1$ABUND),])))\n\n``` \n\n**Check for Missing Data**\n\n``` {r}\nkable(as.data.frame(do.call(rbind,lapply(xy.ss.covar.pkey.method_nomissing.pc1, function(x) {sum(is.na(x))})))) # check for missing data\n```\n\n`r length(xy.ss.covar.pkey.method_nomissing.pc1[is.na(xy.ss.covar.pkey.method_nomissing.pc1$ABUND),]$PKEY)` unique PKEYs have no bird data associated with them. In PCODEs: `r unique(xy.ss.covar.pkey.method_nomissing.pc1[is.na(xy.ss.covar.pkey.method_nomissing.pc1$ABUND),]$PCODE)`\n\n``` {r}\nxy.ss.covar.pkey.method_nomissing.pc2 <- merge(datformerging, pcdat, by=\"PKEY\", all.y =T) # merge with all abund data, regardless of presence in xy or pkey tables\n\nkable(rbind(head(xy.ss.covar.pkey.method_nomissing.pc2[is.na(xy.ss.covar.pkey.method_nomissing.pc2$PCODE),]),\n            tail(xy.ss.covar.pkey.method_nomissing.pc2[is.na(xy.ss.covar.pkey.method_nomissing.pc2$PCODE),])))\n\n``` \n\n**Check for Missing Data**\n\n``` {r}\nkable(as.data.frame(do.call(rbind, lapply(xy.ss.covar.pkey.method_nomissing.pc2, function(x) {sum(is.na(x))})))) # check for missing data\n```\n\n`r length(unique(xy.ss.covar.pkey.method_nomissing.pc2[is.na(xy.ss.covar.pkey.method_nomissing.pc2$PCODE),]$PKEY))` unique PKEYs have bird data, but are missing some element from survey method such as spatial location, date, etc. In PCODEs: `r unique(xy.ss.covar.pkey.method_nomissing.pc2[is.na(xy.ss.covar.pkey.method_nomissing.pc2$PCODE),]$PCODE)`\n\n``` {r}\nxy.ss.covar.pkey.method_nomissing.pc3 <- merge(datformerging, pcdat, by=\"PKEY\", all =T) # keeps all pkeys even if missing some data\n``` \n\n**Check for Missing Data**\n\n``` {r}\n\nkable(as.data.frame(do.call(rbind,lapply(xy.ss.covar.pkey.method_nomissing.pc3, function(x) {sum(is.na(x))})))) # check for missing data\n```\n\n``` {r}\nxy.ss.covar.pkey.method_nomissing.pc4 <- merge(datformerging, pcdat, by=\"PKEY\") # merge only where we have all data\n\nhead(xy.ss.covar.pkey.method_nomissing.pc4[is.na(xy.ss.covar.pkey.method_nomissing.pc4$ABUND),])\n\n``` \n\n**Check for Missing Data**\n\n``` {r}\nkable(as.data.frame(do.call(rbind,lapply(xy.ss.covar.pkey.method_nomissing.pc4, function(x) {sum(is.na(x))})))) # check for missing data\n```\n\nIn omitting PKEYs where we're missing some data (either bird data or survey / methodological information), we omit `r length(unique(xy.ss.covar.pkey.method_nomissing.pc3$PKEY)) - length(unique(xy.ss.covar.pkey.method_nomissing.pc4$PKEY))` PKEYs. \n\n##### Decide which table to use in future analyses\n\n``` {r}\nxy.ss.covar.pkey.method_nomissing.pc.use <- xy.ss.covar.pkey.method_nomissing.pc3\n```\n\n\n##### Write the table for later\n\n``` {r}\nwrite.table(xy.ss.covar.pkey.method_nomissing.pc.use, file=\"data/birddata_preprocess1.csv\", sep=\",\", row.names=F, col.names=T)\n```\n\n\n## Check for Systematic Differences Among Surveys\n\nBC Models are to be built for all species, not individual species. Peter explored the possibility of a Total Bird offset, which corrects for survey methodlogy and detectability in general, but not individual species detectability. When my preliminary results didn't follow expected patterns in bird response to forest age and height, we started to wonder if the total offset is obscuring some of those patterns. \n\nPeter suggested scaling all point counts to the same time/distance and then running analyses without a correction factor offset. This will be challenging if I want to include BBS data, which are unlimited distance surveys. \n\nFirst thing to check... whether species means differ by survey method. \n\n#### Which surveys use the same methods?\n\n* Survey method is indicated at the PKEY level\n    * Merge PKEY table with point count data to link method to data from individual point counts\n    * Merge resultant table with method legend so I know the distance and duration methods used. \n    * Calculate means and counts of surveys per method\n    \nIf there are systematic differences in mean abundance, I can't simiply lump all data together in one analysis because variation caused by methods will cause non-random spatial biases in abundances. \n\n``` {r merged.xy.ss.covar.pkey.method_nomissing.pc, eval=T}\nxy.ss.covar.pkey.method_nomissing.pc <- xy.ss.covar.pkey.method_nomissing.pc.use\ncolnames(xy.ss.covar.pkey.method_nomissing.pc)[which(colnames(xy.ss.covar.pkey.method_nomissing.pc) == \"PCODE_derived\")] <- \"PCODE\"\n```\n\nFilter for those that don't have method\n\n```{r}\nxy.ss.covar.pkey.method_nomissing.pc <- xy.ss.covar.pkey.method_nomissing.pc[!is.na(xy.ss.covar.pkey.method_nomissing.pc$METHOD),]\n```\n\n\nCreate unique ID for combination of duration and distance method\n\n``` {r}\nxy.ss.covar.pkey.method_nomissing.pc$DurDisKey <- paste(xy.ss.covar.pkey.method_nomissing.pc$DURMETH, xy.ss.covar.pkey.method_nomissing.pc$DISTMETH, sep=\".\")\n```\n\n#### Compare bird counts among different survey types\n\n`r length(unique(xy.ss.covar.pkey.method_nomissing.pc$DurDisKey))` different combinations of methods used, across `r length(unique(xy.ss.covar.pkey.method_nomissing.pc$PCODE))` different projects.\n\nSubset to round1 and behaviour = 6 only\n\n``` {r}\nxy.ss.covar.pkey.method_nomissing.pc.round1 <- xy.ss.covar.pkey.method_nomissing.pc[xy.ss.covar.pkey.method_nomissing.pc$ROUND == 1 & xy.ss.covar.pkey.method_nomissing.pc$BEH == 6,]\n```\n\nAggregate to \"total bird\" count per survey instance\n\n``` {r aggregate, eval=T}\npkey.sumabund <- aggregate(xy.ss.covar.pkey.method_nomissing.pc.round1$ABUND,  by=list(PKEY=xy.ss.covar.pkey.method_nomissing.pc.round1$PKEY), FUN=sum)\ncolnames(pkey.sumabund)[2] <- \"sumABUND\"\n```\n\nMerge with original dataset to get details of methods\n\n``` {r reattribute.method}\npkey.method <- xy.ss.covar.pkey.method_nomissing.pc.round1[c(\"PKEY\", \"DISTMETH\", \"DURMETH\", \"METHOD\", \"MaxDuration\", \"Maxdist\", \"DurDisKey\")]\npkey.method <- pkey.method[!duplicated(pkey.method),]\n\npkey.sumabund <- merge(pkey.sumabund, pkey.method, by=\"PKEY\")\n```\n\nCalculate mean abundance by method\n\n``` {r compare.bird.means.by.method, eval=T}\nmethod.means <- aggregate(pkey.sumabund$sumABUND, by=list(DurDisKey=pkey.sumabund$DurDisKey), FUN=mean) # abundance per unique method\ncolnames(method.means)[2] <- \"MeanAbund\"\n\nmethod.counts <- aggregate(pkey.sumabund$sumABUND, by=list(DurDisKey=pkey.sumabund$DurDisKey), FUN=length) # number of PKEYs (i.e. survey occasions) per unique method. \ncolnames(method.counts)[2] <- \"CountSurveys\"\n\n# Create a key for all methods represented in the BC dataset\ndurcodes <- read.csv(\"data/DD_duration_codes_methodology.csv\", header=T)\ndiscodes <- read.csv(\"data/DD_distance_codes_methodology.csv\", header=T)\ncolnames(durcodes)[2] <- \"DURMETH\"\ncolnames(discodes)[1] <- \"DISTMETH\"\nmethod.lookup <- pkey.method[c(\"DISTMETH\", \"DURMETH\", \"DurDisKey\", \"MaxDuration\", \"Maxdist\")]\nmethod.lookup <- method.lookup[!duplicated(method.lookup),]\nmethod.lookup <- merge(method.lookup, durcodes, by=\"DURMETH\", all.x=T)\nmethod.lookup <- merge(method.lookup, discodes, by=\"DISTMETH\", all.x=T)\n\nmethod.means <- merge(method.means, method.lookup[c(\"DurDisKey\", \"DISTMETH\", \"DURMETH\", \"MaxDuration\", \"Maxdist\", \"DURATIONRANGE\", \"DISTANCERANGE\")], by=\"DurDisKey\")\nmethod.stats <- merge(method.means, method.counts, by=\"DurDisKey\")\n\nmethod.stats <- method.stats[order(method.stats$MaxDuration, method.stats$Maxdist), c(\"DurDisKey\", \"DURMETH\",\"DISTMETH\", \"MaxDuration\", \"Maxdist\", \"DURATIONRANGE\", \"DISTANCERANGE\", \"CountSurveys\", \"MeanAbund\")]\n\nkable(method.stats, row.names=F)\n```\n\n## Conclusions\n\n* Yup there are systematic differences among surveys / methods, so I can't simply lump everything in a single analysis. \n* I met with Peter Solymos on Dec 11 to discuss, and we came up with the following plans: \n    * Peter thinks his total bird offset still makes sense. It corrects for survey method and for effects of time of year and of day on detectability... just not for species-specific EDR and singing rate, for example. \n    * If I want an alternative I could do the following: \n        * Use survey method as correction FACTORs in model, based on max duration and max distance\n            * 3 levels for duration: max duration is 3, 5/6, or 8/10\n            * 3 levels for distance: max distance is 50, 80/100, and 150/unlimited\n        * Response variable is total abundance per PKEY (don't try to subset based on survey interval or band)\n        * These two factors are additive, not interactive\n        * Could include PCODE in addition to the above... to see if there are effects of Project independent of method\n\n## Next Steps\n\n* Clean up VRI data\n\n",
    "created" : 1516641625053.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3635732808",
    "id" : "17FA67E8",
    "lastKnownWriteTime" : 1516643113,
    "last_content_update" : 1516643113420,
    "path" : "C:/Users/nbarker/Dropbox/BAM/Research/MB Matrix.BC VRI models/Analysis 2017 summer/NBarker.BCVRImodels/munge/00.02.PreprocessAvian_PKEY.Rmd",
    "project_path" : "munge/00.02.PreprocessAvian_PKEY.Rmd",
    "properties" : {
        "chunk_output_type" : "console",
        "content_preview_inline" : "false",
        "source_window_id" : ""
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}